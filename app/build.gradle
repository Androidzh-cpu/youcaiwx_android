apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

android {
    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
    properties.load(inputStream)
    def sdkDir = properties.getProperty('key.file')
    def key_file = file(sdkDir)
    def key_keyAlias = properties.getProperty('keyAlias')
    def key_keyPassword = properties.getProperty('keyPassword')
    def key_storePassword = properties.getProperty('storePassword')

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    defaultConfig {
        applicationId rootProject.ext.android.applicationId

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        multiDexEnabled true
        multiDexKeepProguard file('multiDexKeep.pro') // keep specific classes
        testInstrumentationRunner rootProject.ext.android.testInstrumentationRunner

        resConfigs "zh", "zh-rCN"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        //TODO x5内核暂时不提供64位的so文件,在64位手机上需要让AP以32位模式运行
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
        sourceSets {
            main {
                jniLibs.srcDir "src/main/libs"
            }
        }
    }

    //TODO 当我们使用Gradle构建时，可以通过lintoptions配置选项，并定义是否需要停止编译，强制让开发者处理较为严重的问题
    lintOptions {
        // true--错误发生后停止gradle构建
        abortOnError false
        // true--关闭lint报告的分析进度
        quiet true
        // true--只报告error
        ignoreWarnings true
        // true--检查所有问题点，包含其他默认关闭项
        checkAllWarnings true
        // true--所有warning当做error
        warningsAsErrors true
        // 关闭指定问题检查
        disable 'TypographyFractions', 'TypographyQuotes'
        // 打开指定问题检查
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // 仅检查指定问题
        check 'NewApi', 'InlinedApi'
        // true--error输出文件不包含源码行号
        noLines true
        // true--显示错误的所有发生位置，不截取
        showAll true
        // 回退lint设置(默认规则)
        lintConfig file("default-lint.xml")
        // true--生成txt格式报告(默认false)
        textReport true
        // 重定向输出；可以是文件或'stdout'
        textOutput 'stdout'
        // true--生成XML格式报告
        xmlReport false
        // 指定xml报告文档(默认lint-results.xml)
        xmlOutput file("lint-report.xml")
        // true--生成HTML报告(带问题解释，源码位置，等)
        htmlReport true
        // html报告可选路径(构建器默认是lint-results.html )
        htmlOutput file("lint-report.html")
        //  true--所有正式版构建执行规则生成崩溃的lint检查，如果有崩溃问题将停止构建
        checkReleaseBuilds true
        // 在发布版本编译时检查(即使不包含lint目标)，指定问题的规则生成崩溃
        fatal 'NewApi', 'InlineApi'
        // 指定问题的规则生成错误
        error 'Wakelock', 'TextViewEdits'
        // 指定问题的规则生成警告
        warning 'ResourceAsColor'
        // 忽略指定问题的规则(同关闭检查)
        ignore 'TypographyQuotes'

    }
    //TODO dx工具（android将jar包转成dex格式二进制jar包工具）,这将应用所有使用dex的task。解决65535的配置
    dexOptions {
        //incremental true  //开启incremental dexing,优化编译效率，这个功能android studio默认是关闭的,incremental这个将在2018年后被弃用
        javaMaxHeapSize "4g"   //增加java堆内存大小
        preDexLibraries = false//关闭预编译
    }

    //TODO 签名配置文件所在位置
    signingConfigs {
        relese {
            try {
                storeFile key_file
                storePassword key_storePassword
                keyAlias key_keyAlias
                keyPassword key_keyPassword
            } catch (ex) {
                ex.printStackTrace()
                throw new InvalidUserDataException("秘钥用户名或密码错误${ex.getMessage()}")
            }
        }
        debug {
            try {
                storeFile key_file
                storePassword key_storePassword
                keyAlias key_keyAlias
                keyPassword key_keyPassword
            } catch (ex) {
                ex.printStackTrace()
                throw new InvalidUserDataException("秘钥用户名或密码错误${ex.getMessage()}")
            }
        }
    }
    //TODO 不同的构建类型
    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            // 混淆
            minifyEnabled true
            //移除无用的resources文件,假如发生resources$弄他foundexception:resources ID #0X4错误可关闭此功能
            shrinkResources true
            //Zipalign优化
            zipAlignEnabled true
            //debug调试
            debuggable false
            //是否支持JNI调试
            jniDebuggable false
            //签名
            signingConfig signingConfigs.relese
            // 混淆文件的位置
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //移除无用的resources文件,假如发生resources$弄他foundexception:resources ID #0X4错误可关闭此功能
            shrinkResources false
            //应用程序标识后缀
            //applicationIdSuffix ".beta"//因为7.0文件共享的原因,导致配置单额fileprovide与应用程序后缀无法同步
            // 为版本名添加后缀
            versionNameSuffix ".beta"
            //不开启ZipAlign优化
            zipAlignEnabled true
            //是否支持调试
            debuggable true
            //是否支持JNI调试
            jniDebuggable true
            //是否进行混淆
            minifyEnabled true
            signingConfig signingConfigs.debug
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //TODO Java8支持  指定JDK的编译版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    //TODO 批量修改生成的 apk 文件名
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${defaultConfig.applicationId}.${buildType.name}.${variant.versionName}.apk"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.espresso
    androidTestImplementation rootProject.ext.dependencies.runner
    implementation rootProject.ext.supportLib.appcompat_v7
    implementation rootProject.ext.supportLib.support_v4
    implementation rootProject.ext.supportLib.support_design
    implementation rootProject.ext.supportLib.cardview
    implementation rootProject.ext.supportLib.recyclerview
    implementation rootProject.ext.supportLib.support_constraint
    implementation rootProject.ext.supportLib.support_annotations
    implementation rootProject.ext.supportLib.multidex

    implementation rootProject.ext.dependencies.XTabLayout
    implementation rootProject.ext.dependencies.barteksc_pdf
    implementation rootProject.ext.dependencies.litepal
    implementation rootProject.ext.dependencies.NewbieGuide
    implementation rootProject.ext.dependencies.orhanobut
    implementation rootProject.ext.dependencies.soulpermission
    implementation rootProject.ext.dependencies.XUpdate
    implementation rootProject.ext.dependencies.banner
    implementation rootProject.ext.dependencies.circleimageview
    implementation rootProject.ext.dependencies.wechat_opensdk
    implementation rootProject.ext.dependencies.aliyun_oss
    implementation rootProject.ext.dependencies.AlivcConan
    implementation rootProject.ext.dependencies.bugly

    implementation rootProject.ext.butterknife.butterknife
    annotationProcessor rootProject.ext.butterknife.annotationProcessor

    implementation rootProject.ext.glide.glide
    annotationProcessor rootProject.ext.glide.glide_compiler
    annotationProcessor rootProject.ext.glide.glide_okhttp3
    implementation rootProject.ext.glide.glide_transformations

    implementation rootProject.ext.SmartRefreshLayout.SmartRefreshLayout
    implementation rootProject.ext.SmartRefreshLayout.SmartRefreshHeader
    implementation rootProject.ext.SmartRefreshLayout.drawable_gif

    implementation rootProject.ext.okhttp3.okhttp3
    implementation rootProject.ext.okhttp3.mockwebserver
    implementation rootProject.ext.okhttp3.logging_interceptor
    implementation rootProject.ext.okhttp3.okhttp_utils

    implementation rootProject.ext.google.gson
    implementation rootProject.ext.google.qrcode
    implementation rootProject.ext.google.zxing

    implementation rootProject.ext.facebook.shimmerlayout
    implementation rootProject.ext.facebook.shimmer

    implementation rootProject.ext.picture.matisse
    implementation rootProject.ext.picture.Luban
    implementation rootProject.ext.picture.imagepicker

    implementation rootProject.ext.umeng.umeng_common
    implementation rootProject.ext.umeng.umeng_analytics
    implementation rootProject.ext.umeng.umeng_utdid
    implementation rootProject.ext.umeng.umeng_push

    implementation project(':okgo')
    implementation project(':Transferee')
    implementation project(':FlycoRoundView')
    implementation files('libs/tbs_sdk_thirdapp_v4.3.0.1072_43646_sharewithdownloadwithfile_withoutGame_obfs_20190429_175122.jar')
    implementation(name: 'AlivcPlayer-3.4.9', ext: 'aar')
    implementation(name: 'AlivcReporter-1.2', ext: 'aar')
    implementation(name: 'AliyunVodPlayer-3.4.9', ext: 'aar')
    implementation(name: 'alipaySdk-15.6.5-20190718211159-noUtdid', ext: 'aar')
    implementation files('libs/umeng-share-core-6.9.4.jar')
    implementation files('libs/umeng-share-wechat-simplify-6.9.4.jar')
    implementation files('libs/umeng-shareboard-widget-6.9.4.jar')
    implementation files('libs/umeng-sharetool-6.9.4.jar')
}
